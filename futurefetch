#!/bin/bash

# this tool is licensed under the gpl 3.0 >:( (fear me lmao)

# VARIABLES

pathtoconfig="/etc/ffetchconfig" # by default it is at /etc/ffetchconfig
futurefetchver="0.3.0" # version of this tool
accentcolor=$(head -n 20 "$pathtoconfig" | tail -1)
secondcolor=$(head -n 24 "$pathtoconfig" | tail -1)
showcredits=$(head -n 41 "$pathtoconfig" | tail -1)
credits="\033[1;92mfuturefetch \033[0mby \033[46mitsnotAZ\033[0m and contributors"
configcredits=$(head -n 45 "$pathtoconfig" | tail -1)

# PRINT STUFF

print_logo(){
  linen=28
  endlinen=37
  until [ $linen -gt "$endlinen" ]
  do
    linecont=$(head -n +"$linen" "$pathtoconfig" | tail -n 1)
    echo -e "$linecont"
    linen=$((linen + 1))
  done
}

print_universal_info(){
  if [[ "$OSTYPE" == "linux-gnu"* ]] # Linux support (obviously)
  then
    echo -e "$accentcolor OS Name$secondcolor $(cat /etc/os-release | grep -oP '(?<=^NAME=).+' | tr -d '"')"
    echo -e "$accentcolor OS Name 2$secondcolor $(uname -o)"
    echo -e "$accentcolor OS Version$secondcolor $(cat /etc/os-release | grep -oP '(?<=^VERSION=).+' | tr -d '"')"
    echo -e "$accentcolor OS Homepage$secondcolor $(cat /etc/os-release | grep -oP '(?<=^HOME_URL=).+' | tr -d '"')"
    echo -e "$accentcolor OS Kernel$secondcolor $(uname -s -r)"
    echo -e "$accentcolor Architecture$secondcolor $(uname -m)"
    echo -e "$accentcolor Resolution$secondcolor $(xrandr --current | grep '*' | uniq | awk '{print $1}' | cut -d 'x' -f1) x $(xrandr --current | grep '*' | uniq | awk '{print $1}' | cut -d 'x' -f2)
"
    echo -e "$accentcolor DE$secondcolor $XDG_CURRENT_DESKTOP"
    echo -e "$accentcolor Session$secondcolor $DESKTOP_SESSION"
    echo -e "$accentcolor Uptime$secondcolor $(uptime -p)"
    echo -e "$accentcolor CPU$secondcolor $(lscpu | awk -F': *' '/Model name/{print $2}')"
    echo -e "$accentcolor GPU$secondcolor $(lshw 2>/dev/null -C display | grep product | head -n 1 | awk '{print $2, $3}')"
    echo -e "$accentcolor Memory$secondcolor $(awk '/MemTotal/{print $2/1024}' /proc/meminfo) MB"
    echo -e "$accentcolor Future Fetch Version$secondcolor $futurefetchver"
  elif [[ "$OSTYPE" == "darwin"* ]] # MacOS X support (cuz why not) !EXPERIEMENTAL!
  then 
    # i dont own a mac so yeah... help?
    # so yeah this means there is missing
    # stuff, and the stuff that is currently
    # here isn't guaranteed to work lmao...
    echo -e "$accentcolor OS Name$secondcolor MacOS X"
    echo -e "$accentcolor OS Homepage$secondcolor https://www.apple.com"
    echo -e "$accentcolor OS Kernel$secondcolor $(uname)"
    echo -e "$accentcolor Architecture$secondcolor $(uname -p)"
    echo -e "$accentcolor Uptime$secondcolor $(uptime -p)"
    echo -e "$accentcolor CPU$secondcolor $(sysctl -n machdep.cpu.brand_string)"
    total_memory="$(sysctl -n hw.memsize)" / 1024 / 1024 # the command prints in bytes so we convert to mb (does this even work?)
    echo -e "$accentcolor Memory$secondcolor $total_memory_mb MB"
    echo -e "$accentcolor Future Fetch Version$secondcolor $futurefetchver"
  elif [[ "$OSTYPE" == "cygwin"* ]] # Cygwin (WINDOWS SUPPORT!!!!!!)
  then
    # unfortunatly i can't figure out how to 
    # output the gpu so yeah
    echo -e "$accentcolor OS Name$secondcolor Microsoft Windows"
    echo -e "$accentcolor OS Homepage$secondcolor https://www.microsoft.com/en-us/windows"
    echo -e "$accentcolor Cygwin$secondcolor $(uname)"
    echo -e "$accentcolor Architecture$secondcolor $(uname -m)"
    echo -e "$accentcolor Resolution$secondcolor $(xrandr --current | grep '*' | uniq | awk '{print $1}' | cut -d 'x' -f1) x $(xrandr --current | grep '*' | uniq | awk '{print $1}' | cut -d 'x' -f2)
"
    echo -e "$accentcolor Uptime$secondcolor $(uptime -p)"
    echo -e "$accentcolor CPU$secondcolor $(lscpu | awk -F': *' '/Model name/{print $2}')"
    echo -e "$accentcolor Memory$secondcolor $(awk '/MemTotal/{print $2/1024}' /proc/meminfo) MB"
    echo -e "$accentcolor Future Fetch Version$secondcolor $futurefetchver"
  else
    echo -e "\033[0;32mERROR (futurefetch): Unknown OS detected"
    exit 1
  fi
}

print_credits(){
  echo -e "$credits"
  echo -e "$configcredits"
}

#print_special(){
#}                  #COMING SOON :D

# RUN STUFF

if [ "$#" -eq  0 ]
then
  echo ""
  print_logo
  echo ""
  print_universal_info
  #echo ""
  #print_special
  if [[ "$showcredits" == "YES" ]]; then
    echo ""
    print_credits
    exit 0
  elif [[ "$showcredits" == "NO" ]]; then
    exit 0
  else
    echo -e "\033[0;32mERROR (futurefetch): $showcredits is an invalid option for SHOW CREDITS in $pathtoconfig"
    exit 1
  fi
elif [ "$1" == "--help" ] || [ "$1" == "-h" ] || [ "$1" == "-H" ] || [ "$1" == "--HELP" ] && [ "$#" -eq  1 ]
then
  echo ""
  echo -e " \033[1;92mfuturefetch \033[0mby \033[46mitsnotaz\033[0m \033[4;37m(https://itsnotaz.github.io/website/)"
  echo -e ""
  echo -e "$accentcolor -h/--help $secondcolor: shows this menu"
  echo -e "$accentcolor -c/--credits $secondcolor: shows the credits only" 
  echo -e "$accentcolor -n/--nologo $secondcolor: does not show the logo"
  echo -e "$accentcolor -i/--noinfo $secondcolor: does not show the info"
  echo -e "$accentcolor -e/--editconfig $secondcolor: opens the config in GNU Nano (with sudo)"
  exit 0
elif [ "$1" == "--credits" ] || [ "$1" == "-c" ] || [ "$1" == "-C" ] || [ "$1" == "--CREDITS" ] && [ "$#" -eq  1 ]
then
  echo ""
  print_credits
  echo ""
  exit 0
elif [ "$1" == "--nologo" ] || [ "$1" == "-n" ] || [ "$1" == "-N" ] || [ "$1" == "--NOLOGO" ] && [ "$#" -eq  1 ]
then
  echo ""
  print_universal_info
  if [[ "$showcredits" == "YES" ]]; then
    echo ""
    print_credits
    exit 0
  elif [[ "$showcredits" == "NO" ]]; then
    exit 0
  else
    echo -e "\033[0;32mERROR (futurefetch): $showcredits is an invalid option for SHOW CREDITS in $pathtoconfig"
    exit 1
  fi
elif [ "$1" == "--noinfo" ] || [ "$1" == "-i" ] || [ "$1" == "-I" ] || [ "$1" == "--NOINFO" ] && [ "$#" -eq  1 ]
then
  echo ""
  print_logo
  if [[ "$showcredits" == "YES" ]]; then
    echo ""
    print_credits
    exit 0
  elif [[ "$showcredits" == "NO" ]]; then
    exit 0
  else
    echo -e "\033[0;32mERROR (futurefetch): $showcredits is an invalid option for SHOW CREDITS in $pathtoconfig"
    exit 1
  fi
elif [ "$1" == "--editconfig" ] || [ "$1" == "-e" ] || [ "$1" == "-E" ] || [ "$1" == "--EDITCONFIG" ] && [ "$#" -eq  1 ]
then
  if [[ "$OSTYPE" == "cygwin"* ]]
  then
    cygstart --action=runas nano "$pathtoconfig"
  else
    sudo nano "$pathtoconfig"
  fi
else
  echo -e "\033[0;32mERROR (futurefetch): Invalid arguement(s)"
  exit 1
fi  

